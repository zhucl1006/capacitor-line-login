# Line Login 构建配置规范

## 项目配置文件

### 1. 主项目配置
- [package.json](mdc:package.json) - NPM 包配置和脚本
- [tsconfig.json](mdc:tsconfig.json) - TypeScript 编译配置
- [rollup.config.mjs](mdc:rollup.config.mjs) - 打包配置

### 2. iOS 配置
- [Package.swift](mdc:Package.swift) - Swift Package Manager 配置
- [CapacitorLineLogin.podspec](mdc:CapacitorLineLogin.podspec) - CocoaPods 配置

### 3. Android 配置
- [android/build.gradle](mdc:android/build.gradle) - Android 模块构建配置
- [android/src/main/AndroidManifest.xml](mdc:android/src/main/AndroidManifest.xml) - Android 清单文件

## NPM 包配置

### package.json 结构
```json
{
  "name": "capacitor-line-login",
  "version": "0.0.1",
  "description": "Line Login plugin for Capacitor",
  "main": "dist/plugin.cjs.js",
  "module": "dist/esm/index.js",
  "types": "dist/esm/index.d.ts",
  "unpkg": "dist/plugin.js",
  "files": [
    "android/src/main/",
    "android/build.gradle",
    "dist/",
    "ios/Sources",
    "ios/Tests",
    "Package.swift",
    "CapacitorLineLogin.podspec"
  ],
  "scripts": {
    "verify": "npm run verify:ios && npm run verify:android && npm run verify:web",
    "verify:ios": "xcodebuild -scheme CapacitorLineLogin -destination generic/platform=iOS",
    "verify:android": "cd android && ./gradlew clean build test && cd ..",
    "verify:web": "npm run build",
    "build": "npm run clean && npm run docgen && tsc && rollup -c rollup.config.mjs",
    "docgen": "docgen --api LineLoginPlugin --output-readme README.md --output-json dist/docs.json"
  },
  "capacitor": {
    "ios": {
      "src": "ios"
    },
    "android": {
      "src": "android"
    }
  }
}
```

## iOS 配置

### Package.swift 配置
```swift
// swift-tools-version: 5.9
import PackageDescription

let package = Package(
    name: "CapacitorLineLogin",
    platforms: [.iOS(.v14)],
    products: [
        .library(
            name: "CapacitorLineLogin",
            targets: ["LineLoginPlugin"])
    ],
    dependencies: [
        .package(url: "https://github.com/ionic-team/capacitor-swift-pm.git", from: "7.0.0"),
        .package(url: "https://github.com/line/line-sdk-ios-swift.git", from: "5.8.0")
    ],
    targets: [
        .target(
            name: "LineLoginPlugin",
            dependencies: [
                .product(name: "Capacitor", package: "capacitor-swift-pm"),
                .product(name: "Cordova", package: "capacitor-swift-pm"),
                .product(name: "LineSDK", package: "line-sdk-ios-swift")
            ],
            path: "ios/Sources/LineLoginPlugin"),
        .testTarget(
            name: "LineLoginPluginTests",
            dependencies: ["LineLoginPlugin"],
            path: "ios/Tests/LineLoginPluginTests")
    ]
)
```

### CocoaPods 配置
```ruby
require 'json'

package = JSON.parse(File.read(File.join(__dir__, 'package.json')))

Pod::Spec.new do |s|
  s.name = 'CapacitorLineLogin'
  s.version = package['version']
  s.summary = package['description']
  s.license = package['license']
  s.homepage = package['repository']['url']
  s.author = package['author']
  s.source = { :git => package['repository']['url'], :tag => s.version.to_s }
  s.source_files = 'ios/Sources/**/*.{swift,h,m,c,cc,mm,cpp}'
  s.ios.deployment_target = '14.0'
  s.dependency 'Capacitor'
  s.dependency 'LineSDK'
  s.swift_version = '5.1'
end
```

## Android 配置

### build.gradle 配置
```gradle
ext {
    junitVersion = project.hasProperty('junitVersion') ? rootProject.ext.junitVersion : '4.13.2'
    androidxAppCompatVersion = project.hasProperty('androidxAppCompatVersion') ? rootProject.ext.androidxAppCompatVersion : '1.7.0'
    androidxJunitVersion = project.hasProperty('androidxJunitVersion') ? rootProject.ext.androidxJunitVersion : '1.2.1'
    androidxEspressoCoreVersion = project.hasProperty('androidxEspressoCoreVersion') ? rootProject.ext.androidxEspressoCoreVersion : '3.6.1'
}

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.7.2'
    }
}

apply plugin: 'com.android.library'

android {
    namespace "com.aile.plugins.linelogin"
    compileSdk project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 35
    defaultConfig {
        minSdkVersion project.hasProperty('minSdkVersion') ? rootProject.ext.minSdkVersion : 23
        targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 35
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }
}

repositories {
    google()
    mavenCentral()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':capacitor-android')
    implementation 'com.linecorp:linesdk:5.8.1'
    
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
}
```

### AndroidManifest.xml 配置
```xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.aile.plugins.linelogin">

    <!-- 网络权限 -->
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

    <application>
        <!-- Line 登录 Activity -->
        <activity
            android:name="com.linecorp.linesdk.auth.LineAuthenticationActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:theme="@android:style/Theme.Translucent.NoTitleBar">
            <intent-filter>
                <action android:name="android.intent.action.VIEW" />
                <category android:name="android.intent.category.DEFAULT" />
                <category android:name="android.intent.category.BROWSABLE" />
                <data android:scheme="line3rdp.{CHANNEL_ID}" />
            </intent-filter>
        </activity>
    </application>
</manifest>
```

## 构建脚本

### TypeScript 配置
```json
{
  "compilerOptions": {
    "module": "esnext",
    "target": "es2017",
    "moduleResolution": "node",
    "lib": ["es2017", "dom"],
    "declaration": true,
    "outDir": "./dist/esm",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src"],
  "exclude": ["node_modules", "dist", "example-app"]
}
```

### Rollup 配置
```javascript
export default {
  input: 'dist/esm/index.js',
  output: [
    {
      file: 'dist/plugin.js',
      format: 'iife',
      name: 'capacitorLineLogin',
      globals: {
        '@capacitor/core': 'capacitorExports',
      },
      sourcemap: true,
      inlineDynamicImports: true,
    },
    {
      file: 'dist/plugin.cjs.js',
      format: 'cjs',
      sourcemap: true,
      inlineDynamicImports: true,
    },
  ],
  external: ['@capacitor/core'],
};
```

## 示例应用配置

### example-app/package.json
```json
{
  "name": "capacitor-app",
  "version": "1.0.0",
  "description": "Line Login Plugin Example App",
  "type": "module",
  "scripts": {
    "start": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@capacitor/core": "latest",
    "@capacitor/ios": "7.0.0",
    "@capacitor/android": "7.0.0",
    "capacitor-line-login": "file:.."
  },
  "devDependencies": {
    "@capacitor/cli": "latest",
    "vite": "^5.4.2"
  }
}
```

### example-app/capacitor.config.json
```json
{
  "appId": "com.example.linelogin",
  "appName": "Line Login Example",
  "webDir": "dist",
  "bundledWebRuntime": false,
  "plugins": {
    "LineLogin": {
      "channelId": "YOUR_CHANNEL_ID"
    }
  }
}
```

## 版本管理

### 依赖版本
```json
{
  "peerDependencies": {
    "@capacitor/core": ">=7.0.0"
  },
  "devDependencies": {
    "@capacitor/android": "^7.0.0",
    "@capacitor/core": "^7.0.0",
    "@capacitor/docgen": "^0.3.0",
    "@capacitor/ios": "^7.0.0",
    "typescript": "~4.1.5"
  }
}
```

### Line SDK 版本
- **iOS**: LineSDK 5.8.0+
- **Android**: Line SDK 5.8.1+

## 构建流程

### 1. 开发构建
```bash
# 安装依赖
npm install

# 构建项目
npm run build

# 验证所有平台
npm run verify
```

### 2. 发布构建
```bash
# 清理构建
npm run clean

# 生成文档
npm run docgen

# 构建发布版本
npm run build

# 发布到 npm
npm publish
```

### 3. 平台验证
```bash
# iOS 验证
npm run verify:ios

# Android 验证
npm run verify:android

# Web 验证
npm run verify:web
```

## 最佳实践

### 1. 版本控制
- 使用语义化版本控制 (SemVer)
- 在 package.json 中保持版本一致性
- 更新 CHANGELOG.md 记录变更

### 2. 依赖管理
- 固定主要依赖版本
- 定期更新安全补丁
- 使用 peerDependencies 避免版本冲突

### 3. 构建优化
- 启用 TypeScript 严格模式
- 配置适当的 target 和 lib
- 使用 tree-shaking 减少包体积

### 4. 测试配置
- 配置单元测试环境
- 设置集成测试
- 添加 E2E 测试

## 故障排除

### 常见构建问题
1. **iOS 构建失败**
   - 检查 Xcode 版本兼容性
   - 验证 Swift 版本设置
   - 确认 CocoaPods 配置正确

2. **Android 构建失败**
   - 检查 Gradle 版本
   - 验证 Android SDK 版本
   - 确认 Java 版本兼容性

3. **依赖冲突**
   - 清理 node_modules 和 package-lock.json
   - 检查 peerDependencies 版本
   - 使用 npm ls 查看依赖树

### 调试技巧
```bash
# 详细构建日志
npm run build -- --verbose

# 清理缓存
npm run clean && npm cache clean --force

# 检查依赖
npm audit
npm outdated
```
description:
globs:
alwaysApply: false
---
