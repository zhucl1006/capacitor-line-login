# Line Login TypeScript 开发规范

## 接口定义标准

### 1. 插件接口结构
在 [src/definitions.ts](mdc:src/definitions.ts) 中定义的接口应该遵循以下结构：

```typescript
export interface LineLoginPlugin {
  // 初始化方法
  initialize(options: LineLoginConfig): Promise<void>;
  
  // 登录方法
  login(options?: LoginOptions): Promise<LoginResult>;
  
  // 获取用户信息
  getUserProfile(): Promise<UserProfile>;
  
  // 登出方法
  logout(): Promise<void>;
  
  // 刷新令牌
  refreshToken(): Promise<RefreshTokenResult>;
  
  // 检查登录状态
  isLoggedIn(): Promise<{ isLoggedIn: boolean }>;
}
```

### 2. 类型定义规范

#### 配置类型
```typescript
export interface LineLoginConfig {
  channelId: string;
  universalLinkURL?: string;
  webLoginURL?: string;
}
```

#### 登录选项
```typescript
export interface LoginOptions {
  scopes?: string[];
  onlyWebLogin?: boolean;
  botPrompt?: 'normal' | 'aggressive';
}
```

#### 登录结果
```typescript
export interface LoginResult {
  accessToken: string;
  refreshToken?: string;
  expiresIn: number;
  scope: string;
  tokenType: string;
  idToken?: string;
}
```

#### 用户资料
```typescript
export interface UserProfile {
  userId: string;
  displayName: string;
  pictureUrl?: string;
  statusMessage?: string;
}
```

#### 令牌刷新结果
```typescript
export interface RefreshTokenResult {
  accessToken: string;
  refreshToken?: string;
  expiresIn: number;
  scope: string;
  tokenType: string;
}
```

## 错误处理

### 错误类型定义
```typescript
export interface LineLoginError {
  code: string;
  message: string;
  details?: any;
}

export enum LineLoginErrorCode {
  INITIALIZATION_FAILED = 'INITIALIZATION_FAILED',
  LOGIN_CANCELLED = 'LOGIN_CANCELLED',
  LOGIN_FAILED = 'LOGIN_FAILED',
  NETWORK_ERROR = 'NETWORK_ERROR',
  INVALID_TOKEN = 'INVALID_TOKEN',
  USER_NOT_LOGGED_IN = 'USER_NOT_LOGGED_IN',
  PERMISSION_DENIED = 'PERMISSION_DENIED'
}
```

## Web 实现规范

在 [src/web.ts](mdc:src/web.ts) 中实现 WebPlugin 时：

### 1. 类结构
```typescript
export class LineLoginWeb extends WebPlugin implements LineLoginPlugin {
  private isInitialized = false;
  private config?: LineLoginConfig;
  
  async initialize(options: LineLoginConfig): Promise<void> {
    // 实现初始化逻辑
  }
  
  async login(options?: LoginOptions): Promise<LoginResult> {
    // 实现登录逻辑
  }
  
  // 其他方法...
}
```

### 2. 错误处理
```typescript
private handleError(error: any, code: LineLoginErrorCode): never {
  throw {
    code,
    message: error.message || 'Unknown error',
    details: error
  } as LineLoginError;
}
```

## 最佳实践

### 1. 类型安全
- 始终使用 TypeScript 接口定义参数和返回值
- 避免使用 `any` 类型，使用具体的类型定义
- 使用联合类型和枚举来限制可能的值

### 2. 异步操作
- 所有插件方法都应该返回 Promise
- 使用 async/await 语法处理异步操作
- 正确处理错误和异常

### 3. 文档注释
- 为所有公共接口添加 JSDoc 注释
- 包含参数说明和返回值描述
- 添加使用示例

### 4. 命名规范
- 使用 camelCase 命名方法和属性
- 使用 PascalCase 命名接口和类型
- 使用描述性的名称，避免缩写

## 测试相关

### 类型测试
```typescript
// 确保类型正确性
const plugin: LineLoginPlugin = LineLogin;

// 测试方法调用
const result: LoginResult = await plugin.login({
  scopes: ['profile', 'openid']
});
```

### Mock 实现
```typescript
export class LineLoginMock implements LineLoginPlugin {
  async initialize(options: LineLoginConfig): Promise<void> {
    // Mock 实现
  }
  
  async login(options?: LoginOptions): Promise<LoginResult> {
    return {
      accessToken: 'mock-token',
      expiresIn: 3600,
      scope: 'profile',
      tokenType: 'Bearer'
    };
  }
  
  // 其他 mock 方法...
}
```
description:
globs:
alwaysApply: false
---
